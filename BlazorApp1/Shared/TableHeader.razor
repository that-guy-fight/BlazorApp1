@using LinqKit
@using System.ComponentModel.DataAnnotations
@using System.Linq.Expressions

<tr class="text-center">
    <td class="col"></td>
    @foreach (var filter in SearchFilters)
    {
        <td class="col" style="cursor: pointer" @onclick="() => UpdateSort(filter)">@filter.Key</td>
    }
</tr>
<tr class="text-center" style="border-bottom-width: 2px">
    <td class="col d-grid">
        <button class="alert-danger rounded-3" @onclick="ClearSearch">Clear Search</button>
        <button class="alert-success rounded-3">Show Cols</button>
    </td>
    @foreach (KeyValuePair<string, SearchFilter> filter in SearchFilters)
    {
        <td class="col">
            <span class="d-grid">
                <input size="10" value="@filter.Value.SearchText" @onchange="(e => UpdateFilter(e, filter))" />
                <button class="alert-warning rounded-3" style="width: fit-content; margin: auto" @onclick="() => HideColumn(filter)">Hide</button>
            </span>
        </td>
    }
</tr>

@code {
    [Parameter]
    public List<UserPreview> UserList { get; set; }
    [Parameter]
    public EventCallback<List<UserPreview>> UserListChanged { get; set; }
    [Parameter]
    public List<UserPreview> MasterList { get; set; }

    private List<UserPreview> TempList = new List<UserPreview>();
    private Dictionary<string, SearchFilter> SearchFilters = new Dictionary<string, SearchFilter>();
    private KeyValuePair<string, SearchFilter> CurrentFilter = new KeyValuePair<string, SearchFilter>(string.Empty, new SearchFilter(string.Empty, false));
    private string TitleFilter = string.Empty;
    private string FirstNameFilter = string.Empty;
    private string LastNameFilter = string.Empty;
    private string IdFilter = string.Empty;
    private bool InitialLoad = false;

    protected override void OnParametersSet()
    {
        if (UserList.FirstOrDefault() != null)
        {
            if (!InitialLoad)
            {
                var userType = UserList.First().GetType();
                InitialLoad = true;
                for (int displayNumber = 0; displayNumber < userType.GetProperties().Length; displayNumber++)
                {
                    var prop = userType.GetProperties().Where(prop =>
                        ((DisplayAttribute?)Attribute.GetCustomAttribute(prop, typeof(DisplayAttribute))).Order == displayNumber).FirstOrDefault();
                    if (prop != null && !prop.Name.ToLower().Equals("picture"))
                    {
                        SearchFilters.Add(prop.Name, new SearchFilter(string.Empty, false));
                    }
                }
            }
        }
    }

    private void UpdateFilter(ChangeEventArgs e, KeyValuePair<string, SearchFilter> filter)
    {
        if (e != null && e.Value != null)
        {
            SearchFilters[filter.Key].SearchText = e.Value.ToString();
            FilterSearch();
        }
    }

    private void FilterSearch()
    {
        var predicate = BuildSearchExpression();

        if (!String.IsNullOrEmpty(CurrentFilter.Key))
        {
            TempList = MasterList.Where(predicate).ToList();
            var prop = typeof(UserPreview).GetProperty(CurrentFilter.Key);
            if (CurrentFilter.Value.SortDescending)
            {
                UserListChanged.InvokeAsync(TempList.OrderByDescending(user => prop.GetValue(user)).ToList());
            }
            else
            {
                UserListChanged.InvokeAsync(TempList.OrderBy(user => prop.GetValue(user)).ToList());
            }
        }
        else
        {
            UserListChanged.InvokeAsync(MasterList.Where(predicate).ToList());
        }

    }

    private void ClearSearch()
    {
        foreach (var filter in SearchFilters)
        {
            SearchFilters[filter.Key].SearchText = string.Empty;
            SearchFilters[filter.Key].SortDescending = false;
        }

        CurrentFilter = new KeyValuePair<string, SearchFilter>(string.Empty, new SearchFilter(string.Empty, false));
        FilterSearch();
    }

    private void UpdateSort(KeyValuePair<string, SearchFilter> filter)
    {
        filter.Value.SortDescending = !filter.Value.SortDescending;
        CurrentFilter = filter;
        FilterSearch();
    }

    private void HideColumn(KeyValuePair<string, SearchFilter> filter)
    {
        
    }

    private ExpressionStarter<UserPreview> BuildSearchExpression()
    {
        var predicate = PredicateBuilder.New<UserPreview>(true);
        if (UserList.FirstOrDefault() != null)
        {
            foreach (var prop in UserList.First().GetType().GetProperties())
            {
                if (!prop.Name.ToLower().Equals("picture"))
                {
                    predicate = predicate.And(user =>
                        user.GetType().GetProperty(prop.Name).GetValue(user).ToString().ToLower().Contains(SearchFilters[prop.Name].SearchText.ToLower()));
                }
            }
        }

        return predicate;
    }
}